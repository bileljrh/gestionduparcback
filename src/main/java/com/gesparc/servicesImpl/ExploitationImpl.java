package com.gesparc.servicesImpl;

import org.modelmapper.ModelMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;

import com.gesparc.entities.administratif.BeneficiaireEntity;
import com.gesparc.entities.administratif.VehiculeEntity;
import com.gesparc.entities.exploitation.*;
import com.gesparc.entities.referentiel.*;
import com.gesparc.repositories.BeneficiaireRepository;
import com.gesparc.repositories.VehiculeRepository;
import com.gesparc.repositories.exploitation.*;
import com.gesparc.repositories.referentiel.*;
import com.gesparc.security.entity.UserEntity;
import com.gesparc.services.Exploitation;
import com.gesparc.sharedDTO.administratif.Additionnel.SelectVehiculeDTO;
import com.gesparc.sharedDTO.exploitation.DocumentSinistreDTO;
import com.gesparc.sharedDTO.exploitation.SinistreVehiculeDTO;
import com.gesparc.sharedDTO.exploitation.additionnel.*;

import java.text.ParseException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@EnableAutoConfiguration
@Service
public class ExploitationImpl implements Exploitation {

	@Autowired
	VehiculeRepository vehiculeRepository;

	@Autowired
	ReservationVehiculeRepository reservationVehiculeRepository;

	@Autowired
	LocationVehiculeRepository locationVehiculeRepository;

	@Autowired
	SinistreVehiculeRepository sinistreVehiculeRepository;

	@Autowired
	EmpruntVehiculeRepository empruntVehiculeRepository;

	@Autowired
	DocumentSinistreRepository documentSinistreRepository;

	@Autowired
	StructureRepository structureRepository;

	@Autowired
	EnergieRepository energieRepository;

	@Autowired
	GenreVehiculeRepository genreVehiculeRepository;

	@Autowired
	MarqueVehiculeRepository marqueVehiculeRepository;

	@Autowired
	BeneficiaireRepository beneficiaireRepository;

	@Autowired
	ExpertRepository expertRepository;

	Logger logger = LoggerFactory.getLogger(ExploitationImpl.class);

	@Override
	public List<SelectVehiculeDTO> getSelectVehiculeByStrucutureForReservation(UserEntity userEntity) {
		List<VehiculeEntity> vehiculeEntities = new ArrayList<>();
		if (userEntity.getStructures().isEmpty()) {
			vehiculeEntities = vehiculeRepository.findAllByReservationsNull();
		} else {
			StructureEntity structureEntity = userEntity.getStructures().get(0);
			vehiculeEntities = vehiculeRepository.findAllByStructureAndReservationsNull(structureEntity);
		}
		return this.loadSelectVehiculeByStrucuture(vehiculeEntities);
	}

	@Override
	public void addNewDemandeReservationVehicule(ReservationVehiculeTableDataDTO reservationVehiculeTableDataDTO) {
		VehiculeEntity vehiculeEntity = vehiculeRepository.findById(reservationVehiculeTableDataDTO.getIdVehicule())
				.get();
		ReservationVehiculeEntity reservationVehiculeEntity = new ReservationVehiculeEntity();
		reservationVehiculeEntity.setConfirmed(false);
		reservationVehiculeEntity.setDateDemandeReservation(LocalDate.now());
		reservationVehiculeEntity.setDateDebutReservation(reservationVehiculeTableDataDTO.getDateDebutReservation());
		reservationVehiculeEntity.setDateFinReservation(reservationVehiculeTableDataDTO.getDateFinReservation());
		reservationVehiculeEntity.setVehicule(vehiculeEntity);
		reservationVehiculeEntity.setObjet(reservationVehiculeTableDataDTO.getObjet());
		if (vehiculeEntity.getReservations().isEmpty()) {
			vehiculeEntity.setReservations(new ArrayList<>());
		}
		vehiculeEntity.getReservations().add(reservationVehiculeEntity);
		reservationVehiculeRepository.save(reservationVehiculeEntity);
	}

	@Override
	public Long getTotalNumberListReservationVehiculeBySelectedStatus(String status, int page, int limit) {
		Long totalItem;
		PageRequest pageable = PageRequest.of(page, limit);
		if (status.equals("En cours")) {
			Page<ReservationVehiculeEntity> reservationVehiculeEntityPage = reservationVehiculeRepository
					.findAllByConfirmed(false, pageable);
			totalItem = reservationVehiculeEntityPage.getTotalElements();
		} else if (status.equals("Confirmée")) {
			Page<ReservationVehiculeEntity> reservationVehiculeEntityPage = reservationVehiculeRepository
					.findAllByConfirmed(true, pageable);
			totalItem = reservationVehiculeEntityPage.getTotalElements();
		} else {
			Page<ReservationVehiculeEntity> reservationVehiculeEntityPage = reservationVehiculeRepository
					.findAll(pageable);
			totalItem = reservationVehiculeEntityPage.getTotalElements();
		}
		return totalItem;
	}

	@Override
	public List<ReservationVehiculeTableDataDTO> getPaginationListReservationVehiculeBySelectedStatus(String status,
			int page, int limit) {
		List<ReservationVehiculeEntity> reservationVehiculeEntities = new ArrayList<>();
		PageRequest pageable = PageRequest.of(page, limit);
		if (status.equals("En cours")) {
			Page<ReservationVehiculeEntity> reservationVehiculeEntityPage = reservationVehiculeRepository
					.findAllByConfirmed(false, pageable);
			reservationVehiculeEntities = reservationVehiculeEntityPage.getContent();
		} else if (status.equals("Confirmée")) {
			Page<ReservationVehiculeEntity> reservationVehiculeEntityPage = reservationVehiculeRepository
					.findAllByConfirmed(true, pageable);
			reservationVehiculeEntities = reservationVehiculeEntityPage.getContent();
		} else {
			Page<ReservationVehiculeEntity> reservationVehiculeEntityPage = reservationVehiculeRepository
					.findAll(pageable);
			reservationVehiculeEntities = reservationVehiculeEntityPage.getContent();
		}
		return this.loadReservationVehiculeTableDataDTO(reservationVehiculeEntities);
	}

	@Override
	public void deleteSelectedReservationVehicule(Long id) {
		ReservationVehiculeEntity reservationVehiculeEntity = reservationVehiculeRepository.findById(id).get();
		VehiculeEntity vehiculeEntity = reservationVehiculeEntity.getVehicule();
		vehiculeEntity.getReservations().remove(reservationVehiculeEntity);
		reservationVehiculeEntity.setVehicule(null);
		reservationVehiculeRepository.deleteById(id);
	}

	@Override
	public void confirmSelectedReservationVehicule(Long id) {
		ReservationVehiculeEntity reservationVehiculeEntity = reservationVehiculeRepository.findById(id).get();
		reservationVehiculeEntity.setConfirmed(true);
		reservationVehiculeEntity.setDateConfirmationDemandeReservation(LocalDate.now());
		reservationVehiculeRepository.save(reservationVehiculeEntity);
	}

	@Override
	public void addNewLocationVehicule(NewLocationVehiculeDTO newLocationVehiculeDTO) {
		LocationVehiculeEntity locationVehiculeEntity = new LocationVehiculeEntity();
		locationVehiculeEntity.setSocieteLocation(newLocationVehiculeDTO.getSocieteLocation());
		locationVehiculeEntity.setNumeroImmatriculation(newLocationVehiculeDTO.getNumeroImmatriculation());
		locationVehiculeEntity.setNumeroChassis(newLocationVehiculeDTO.getNumeroChassis());
		locationVehiculeEntity.setNumeroPlaque(newLocationVehiculeDTO.getNumeroPlaque());
		locationVehiculeEntity.setMarche(newLocationVehiculeDTO.getMarche());
		locationVehiculeEntity.setIndexKM(newLocationVehiculeDTO.getIndexKM());
		locationVehiculeEntity.setAffectation(newLocationVehiculeDTO.getAffectation());
		locationVehiculeEntity.setDateDebutLocation(newLocationVehiculeDTO.getDateDebutLocation());
		if (newLocationVehiculeDTO.getDateFinLocation() != null) {
			locationVehiculeEntity.setDateFinLocation(newLocationVehiculeDTO.getDateFinLocation());
		}
		StructureEntity structureEntity = structureRepository.findById(newLocationVehiculeDTO.getIdStructure()).get();
		if (structureEntity.getLocations().isEmpty()) {
			structureEntity.setLocations(new ArrayList<>());
		}
		structureEntity.getLocations().add(locationVehiculeEntity);
		locationVehiculeEntity.setStructure(structureEntity);
		EnergieEntity energieEntity = energieRepository.findById(newLocationVehiculeDTO.getIdEnergie()).get();
		if (energieEntity.getLocations().isEmpty()) {
			energieEntity.setLocations(new ArrayList<>());
		}
		energieEntity.getLocations().add(locationVehiculeEntity);
		locationVehiculeEntity.setEnergie(energieEntity);
		if (newLocationVehiculeDTO.getIdGenre() != null) {
			GenreVehiculeEntity genreVehiculeEntity = genreVehiculeRepository
					.findById(newLocationVehiculeDTO.getIdGenre()).get();
			if (genreVehiculeEntity.getLocations().isEmpty()) {
				genreVehiculeEntity.setLocations(new ArrayList<>());
			}
			genreVehiculeEntity.getLocations().add(locationVehiculeEntity);
			locationVehiculeEntity.setGenre(genreVehiculeEntity);
		}
		if (newLocationVehiculeDTO.getIdMarque() != null) {
			MarqueVehiculeEntity marqueVehiculeEntity = marqueVehiculeRepository
					.findById(newLocationVehiculeDTO.getIdMarque()).get();
			if (marqueVehiculeEntity.getLocations().isEmpty()) {
				marqueVehiculeEntity.setLocations(new ArrayList<>());
			}
			marqueVehiculeEntity.getLocations().add(locationVehiculeEntity);
			locationVehiculeEntity.setMarque(marqueVehiculeEntity);
		}
		locationVehiculeRepository.save(locationVehiculeEntity);
	}

	@Override
	public void modifySelectedLocationVehicule(NewLocationVehiculeDTO newLocationVehiculeDTO) {
		LocationVehiculeEntity locationVehiculeEntity = locationVehiculeRepository
				.findById(newLocationVehiculeDTO.getId()).get();
		locationVehiculeEntity.setSocieteLocation(newLocationVehiculeDTO.getSocieteLocation());
		locationVehiculeEntity.setNumeroImmatriculation(newLocationVehiculeDTO.getNumeroImmatriculation());
		locationVehiculeEntity.setNumeroChassis(newLocationVehiculeDTO.getNumeroChassis());
		locationVehiculeEntity.setNumeroPlaque(newLocationVehiculeDTO.getNumeroPlaque());
		locationVehiculeEntity.setMarche(newLocationVehiculeDTO.getMarche());
		locationVehiculeEntity.setIndexKM(newLocationVehiculeDTO.getIndexKM());
		locationVehiculeEntity.setAffectation(newLocationVehiculeDTO.getAffectation());
		locationVehiculeEntity.setDateDebutLocation(newLocationVehiculeDTO.getDateDebutLocation());
		if (newLocationVehiculeDTO.getDateFinLocation() != null) {
			locationVehiculeEntity.setDateFinLocation(newLocationVehiculeDTO.getDateFinLocation());
		}
		if (locationVehiculeEntity.getStructure().getId() != newLocationVehiculeDTO.getIdStructure()) {
			StructureEntity ancienStructureEntity = structureRepository
					.findById(locationVehiculeEntity.getStructure().getId()).get();
			ancienStructureEntity.getLocations().remove(locationVehiculeEntity);
			structureRepository.save(ancienStructureEntity);
			StructureEntity newStructureEntity = structureRepository.findById(newLocationVehiculeDTO.getIdStructure())
					.get();
			if (newStructureEntity.getLocations().isEmpty()) {
				newStructureEntity.setLocations(new ArrayList<>());
			}
			newStructureEntity.getLocations().add(locationVehiculeEntity);
			locationVehiculeEntity.setStructure(newStructureEntity);
			structureRepository.save(newStructureEntity);
		}
		if (locationVehiculeEntity.getEnergie().getId() != newLocationVehiculeDTO.getIdEnergie()) {
			EnergieEntity ancienEnergieEntity = energieRepository.findById(locationVehiculeEntity.getEnergie().getId())
					.get();
			ancienEnergieEntity.getLocations().remove(locationVehiculeEntity);
			energieRepository.save(ancienEnergieEntity);
			EnergieEntity newEnergieEntity = energieRepository.findById(newLocationVehiculeDTO.getIdEnergie()).get();
			if (newEnergieEntity.getLocations().isEmpty()) {
				newEnergieEntity.setLocations(new ArrayList<>());
			}
			newEnergieEntity.getLocations().add(locationVehiculeEntity);
			locationVehiculeEntity.setEnergie(newEnergieEntity);
			energieRepository.save(newEnergieEntity);
		}
		if (newLocationVehiculeDTO.getIdGenre() != null) {
			if (locationVehiculeEntity.getGenre().getId() != newLocationVehiculeDTO.getIdGenre()) {
				GenreVehiculeEntity ancienGenreVehiculeEntity = genreVehiculeRepository
						.findById(locationVehiculeEntity.getGenre().getId()).get();
				ancienGenreVehiculeEntity.getLocations().remove(locationVehiculeEntity);
				genreVehiculeRepository.save(ancienGenreVehiculeEntity);
				GenreVehiculeEntity newGenreVehiculeEntity = genreVehiculeRepository
						.findById(newLocationVehiculeDTO.getIdGenre()).get();
				if (newGenreVehiculeEntity.getLocations().isEmpty()) {
					newGenreVehiculeEntity.setLocations(new ArrayList<>());
				}
				newGenreVehiculeEntity.getLocations().add(locationVehiculeEntity);
				locationVehiculeEntity.setGenre(newGenreVehiculeEntity);
				genreVehiculeRepository.save(newGenreVehiculeEntity);
			}
		}
		if (newLocationVehiculeDTO.getIdMarque() != null) {
			if (locationVehiculeEntity.getMarque().getId() != newLocationVehiculeDTO.getIdMarque()) {
				MarqueVehiculeEntity ancienMarqueVehiculeEntity = marqueVehiculeRepository
						.findById(locationVehiculeEntity.getMarque().getId()).get();
				ancienMarqueVehiculeEntity.getLocations().remove(locationVehiculeEntity);
				marqueVehiculeRepository.save(ancienMarqueVehiculeEntity);
				MarqueVehiculeEntity newMarqueVehiculeEntity = marqueVehiculeRepository
						.findById(newLocationVehiculeDTO.getIdMarque()).get();
				if (newMarqueVehiculeEntity.getLocations().isEmpty()) {
					newMarqueVehiculeEntity.setLocations(new ArrayList<>());
				}
				newMarqueVehiculeEntity.getLocations().add(locationVehiculeEntity);
				locationVehiculeEntity.setMarque(newMarqueVehiculeEntity);
				marqueVehiculeRepository.save(newMarqueVehiculeEntity);
			}
		}
		locationVehiculeRepository.save(locationVehiculeEntity);
	}

	@Override
	public void deleteSelectedLocationVehicule(Long id) {
		LocationVehiculeEntity locationVehiculeEntity = locationVehiculeRepository.findById(id).get();
		StructureEntity structureEntity = locationVehiculeEntity.getStructure();
		structureEntity.getLocations().remove(locationVehiculeEntity);
		structureRepository.save(structureEntity);
		EnergieEntity energieEntity = locationVehiculeEntity.getEnergie();
		energieEntity.getLocations().remove(locationVehiculeEntity);
		energieRepository.save(energieEntity);
		GenreVehiculeEntity genreVehiculeEntity = locationVehiculeEntity.getGenre();
		genreVehiculeEntity.getLocations().remove(locationVehiculeEntity);
		genreVehiculeRepository.save(genreVehiculeEntity);
		MarqueVehiculeEntity marqueVehiculeEntity = locationVehiculeEntity.getMarque();
		marqueVehiculeEntity.getLocations().remove(locationVehiculeEntity);
		marqueVehiculeRepository.save(marqueVehiculeEntity);
		locationVehiculeRepository.deleteById(id);
	}

	@Override
	public List<LocationVehiculeTableDataDTO> getPaginationLocationVehiculeList(UserEntity userEntity,
			LocalDate dateMin, LocalDate dateMax, int page, int limit) {
		List<LocationVehiculeEntity> locationVehiculeEntities = new ArrayList<>();
		LocalDate dateReference = LocalDate.of(1970, 1, 1);
		if (dateMin.equals(dateReference)) {
			dateMin = locationVehiculeRepository.getDateMinDateDebutLocation().minusDays(1);
		} else {
			dateMin = dateMin.minusDays(1);
		}
		if (dateMax.equals(dateReference)) {
			dateMax = locationVehiculeRepository.getDateMaxDateFinLocation().plusDays(1);
		} else {
			dateMax = dateMax.plusDays(1);
		}
		PageRequest pageable = PageRequest.of(page, limit);
		if (userEntity.getStructures().isEmpty()) {
			Page<LocationVehiculeEntity> locationVehiculeEntityPage = locationVehiculeRepository
					.findAllByDateDebutLocationBetween(dateMin, dateMax, pageable);
			locationVehiculeEntities = locationVehiculeEntityPage.getContent();
		} else {
			StructureEntity structureEntity = userEntity.getStructures().get(0);
			Page<LocationVehiculeEntity> locationVehiculeEntityPage = locationVehiculeRepository
					.findAllByStructureAndDateDebutLocationBetween(structureEntity, dateMin, dateMax, pageable);
			locationVehiculeEntities = locationVehiculeEntityPage.getContent();
		}
		return this.loadLocationVehiculeTableData(locationVehiculeEntities);
	}

	@Override
	public Long getTotalNumberLocationVehiculeList(UserEntity userEntity, LocalDate dateMin, LocalDate dateMax) {
		Long totalNumber;
		LocalDate dateReference = LocalDate.of(1970, 1, 1);
		if (dateMin.equals(dateReference)) {
			dateMin = locationVehiculeRepository.getDateMinDateDebutLocation().minusDays(1);
		} else {
			dateMin = dateMin.minusDays(1);
		}
		if (dateMax.equals(dateReference)) {
			dateMax = locationVehiculeRepository.getDateMaxDateFinLocation().plusDays(1);
		} else {
			dateMax = dateMax.plusDays(1);
		}
		PageRequest pageable = PageRequest.of(0, 8);
		if (userEntity.getStructures().isEmpty()) {
			Page<LocationVehiculeEntity> locationVehiculeEntityPage = locationVehiculeRepository
					.findAllByDateDebutLocationBetween(dateMin, dateMax, pageable);
			totalNumber = locationVehiculeEntityPage.getTotalElements();
		} else {
			StructureEntity structureEntity = userEntity.getStructures().get(0);
			Page<LocationVehiculeEntity> locationVehiculeEntityPage = locationVehiculeRepository
					.findAllByStructureAndDateDebutLocationBetween(structureEntity, dateMin, dateMax, pageable);
			totalNumber = locationVehiculeEntityPage.getTotalElements();
		}
		return totalNumber;
	}

	@Override
	public List<SelectVehiculeDTO> getSelectVehiculeByStrucutureForSinistre(UserEntity userEntity) {
		List<VehiculeEntity> vehiculeEntities = new ArrayList<>();
		if (userEntity.getStructures().isEmpty()) {
			vehiculeEntities = vehiculeRepository.findAllBySinistreNull();
		} else {
			StructureEntity structureEntity = userEntity.getStructures().get(0);
			vehiculeEntities = vehiculeRepository.findAllByStructureAndSinistreNull(structureEntity);
		}
		return this.loadSelectVehiculeByStrucuture(vehiculeEntities);
	}

	@Override
	public void addNewSinistreVehicule(NewSinistreVehiculeDTO newSinistreVehiculeDTO) {
		SinistreVehiculeEntity sinistreVehiculeEntity = new SinistreVehiculeEntity();
		VehiculeEntity vehiculeEntity = vehiculeRepository.findById(newSinistreVehiculeDTO.getIdVehicule()).get();
		if (newSinistreVehiculeDTO.getDateSinistre() != null) {
			sinistreVehiculeEntity.setDateSinistre(newSinistreVehiculeDTO.getDateSinistre());
		}
		sinistreVehiculeEntity.setNumeroSinistre(newSinistreVehiculeDTO.getNumeroSinistre());
		sinistreVehiculeEntity.setLieuSinistre(newSinistreVehiculeDTO.getLieuSinistre());
		sinistreVehiculeEntity.setCauseSinistre(newSinistreVehiculeDTO.getCauseSinistre());
		sinistreVehiculeEntity.setNatureSinistre(newSinistreVehiculeDTO.getNatureSinistre());
		sinistreVehiculeEntity.setTier(newSinistreVehiculeDTO.getTier());
		sinistreVehiculeEntity.setAdresseAssurance(newSinistreVehiculeDTO.getAdresseAssurance());
		sinistreVehiculeEntity.setAssurance(newSinistreVehiculeDTO.getAssurance());
		sinistreVehiculeEntity.setCircule(newSinistreVehiculeDTO.isCircule());
		sinistreVehiculeEntity.setAgePermis(newSinistreVehiculeDTO.getAgePermis());
		vehiculeEntity.setSinistre(sinistreVehiculeEntity);
		sinistreVehiculeEntity.setVehicule(vehiculeEntity);
		sinistreVehiculeRepository.save(sinistreVehiculeEntity);
	}

	@Override
	public void modifySelectedSinistreVehicule(NewSinistreVehiculeDTO newSinistreVehiculeDTO) {
		SinistreVehiculeEntity sinistreVehiculeEntity = sinistreVehiculeRepository
				.findById(newSinistreVehiculeDTO.getId()).get();
		if (newSinistreVehiculeDTO.getDateSinistre() != null) {
			sinistreVehiculeEntity.setDateSinistre(newSinistreVehiculeDTO.getDateSinistre());
		}
		if (newSinistreVehiculeDTO.getDateNotification() != null) {
			sinistreVehiculeEntity.setDateNotification(newSinistreVehiculeDTO.getDateNotification());
		}
		if (newSinistreVehiculeDTO.getDateExpertise() != null) {
			sinistreVehiculeEntity.setDateExpertise(newSinistreVehiculeDTO.getDateExpertise());
		}
		if (newSinistreVehiculeDTO.getDateReexpertise() != null) {
			sinistreVehiculeEntity.setDateReexpertise(newSinistreVehiculeDTO.getDateReexpertise());
		}
		if (newSinistreVehiculeDTO.getDateDebut() != null) {
			sinistreVehiculeEntity.setDateDebut(newSinistreVehiculeDTO.getDateDebut());
		}
		if (newSinistreVehiculeDTO.getDateFin() != null) {
			sinistreVehiculeEntity.setDateFin(newSinistreVehiculeDTO.getDateFin());
		}
		if (newSinistreVehiculeDTO.getIdExpert() != null) {
			if (sinistreVehiculeEntity.getExpert() == null) {
				ExpertEntity expertEntity = expertRepository.findById(newSinistreVehiculeDTO.getIdExpert()).get();
				if (expertEntity.getSinistres().isEmpty()) {
					expertEntity.setSinistres(new ArrayList<>());
				}
				expertEntity.getSinistres().add(sinistreVehiculeEntity);
				sinistreVehiculeEntity.setExpert(expertEntity);
				expertRepository.save(expertEntity);
			} else {
				if (sinistreVehiculeEntity.getExpert().getId() != newSinistreVehiculeDTO.getIdExpert()) {
					ExpertEntity ancienExpertEntity = sinistreVehiculeEntity.getExpert();
					ancienExpertEntity.getSinistres().remove(sinistreVehiculeEntity);
					expertRepository.save(ancienExpertEntity);
					ExpertEntity newExpertEntity = expertRepository.findById(sinistreVehiculeEntity.getExpert().getId())
							.get();
					if (newExpertEntity.getSinistres().isEmpty()) {
						newExpertEntity.setSinistres(new ArrayList<>());
					}
					newExpertEntity.getSinistres().add(sinistreVehiculeEntity);
					sinistreVehiculeEntity.setExpert(newExpertEntity);
					expertRepository.save(newExpertEntity);
				}
			}
		}
		sinistreVehiculeEntity.setMontantReparation(newSinistreVehiculeDTO.getMontantReparation());
		sinistreVehiculeEntity.setMontantIndemnite(newSinistreVehiculeDTO.getMontantIndemnite());
		sinistreVehiculeEntity.setNumeroSinistre(newSinistreVehiculeDTO.getNumeroSinistre());
		sinistreVehiculeEntity.setLieuSinistre(newSinistreVehiculeDTO.getLieuSinistre());
		sinistreVehiculeEntity.setCauseSinistre(newSinistreVehiculeDTO.getCauseSinistre());
		sinistreVehiculeEntity.setNatureSinistre(newSinistreVehiculeDTO.getNatureSinistre());
		sinistreVehiculeEntity.setTier(newSinistreVehiculeDTO.getTier());
		sinistreVehiculeEntity.setAdresseAssurance(newSinistreVehiculeDTO.getAdresseAssurance());
		sinistreVehiculeEntity.setAssurance(newSinistreVehiculeDTO.getAssurance());
		sinistreVehiculeEntity.setCircule(newSinistreVehiculeDTO.isCircule());
		sinistreVehiculeEntity.setAgePermis(newSinistreVehiculeDTO.getAgePermis());
		sinistreVehiculeEntity.setObservations(newSinistreVehiculeDTO.getObservations());
		sinistreVehiculeRepository.save(sinistreVehiculeEntity);
	}

	@Override
	public List<SinistreVehiculeTableDataDTO> getPaginationListSinistreVehicule(String etat, int annee, int page,
			int limit) {
		List<SinistreVehiculeEntity> sinistreVehiculeEntities = new ArrayList<>();
		PageRequest pageable = PageRequest.of(page, limit);
		if (annee == 1970) {
			if (etat.equals("tousEtats")) {
				Page<SinistreVehiculeEntity> sinistreVehiculeEntityPage = sinistreVehiculeRepository
						.getPaginationSinistreVehicule(pageable);
				sinistreVehiculeEntities = sinistreVehiculeEntityPage.getContent();
			} else {
				Page<SinistreVehiculeEntity> sinistreVehiculeEntityPage = sinistreVehiculeRepository
						.getPaginationSinistreVehiculeBySelectedEtat(etat, pageable);
				sinistreVehiculeEntities = sinistreVehiculeEntityPage.getContent();
			}
		} else {
			LocalDate dateMin = LocalDate.of(annee, 1, 1);
			LocalDate dateMax = LocalDate.of(annee, 12, 31);
			if (etat.equals("tousEtats")) {
				Page<SinistreVehiculeEntity> sinistreVehiculeEntityPage = sinistreVehiculeRepository
						.getPaginationSinistreVehiculeBySelectedAnnee(dateMin, dateMax, pageable);
				sinistreVehiculeEntities = sinistreVehiculeEntityPage.getContent();
			} else {
				Page<SinistreVehiculeEntity> sinistreVehiculeEntityPage = sinistreVehiculeRepository
						.getPaginationSinistreVehiculeBySelectedAnneeAndEtat(dateMin, dateMax, etat, pageable);
				sinistreVehiculeEntities = sinistreVehiculeEntityPage.getContent();
			}
		}
		return this.loadSinistreVehiculeTableData(sinistreVehiculeEntities);
	}

	@Override
	public Long getTotalNumberListSinistreVehicule(String etat, int annee) {
		ModelMapper modelMapper = new ModelMapper();
		Long totalNumber;
		List<SinistreVehiculeDTO> sinistreVehiculeDTOS = new ArrayList<>();
		PageRequest pageable = PageRequest.of(0, 8);
		if (annee == 1970) {
			if (etat.equals("tousEtats")) {
				Page<SinistreVehiculeEntity> sinistreVehiculeEntityPage = sinistreVehiculeRepository
						.getPaginationSinistreVehicule(pageable);
				totalNumber = sinistreVehiculeEntityPage.getTotalElements();
			} else {
				Page<SinistreVehiculeEntity> sinistreVehiculeEntityPage = sinistreVehiculeRepository
						.getPaginationSinistreVehiculeBySelectedEtat(etat, pageable);
				totalNumber = sinistreVehiculeEntityPage.getTotalElements();
			}
		} else {
			LocalDate dateMin = LocalDate.of(annee, 1, 1);
			LocalDate dateMax = LocalDate.of(annee, 12, 31);
			if (etat.equals("tousEtats")) {
				Page<SinistreVehiculeEntity> sinistreVehiculeEntityPage = sinistreVehiculeRepository
						.getPaginationSinistreVehiculeBySelectedAnnee(dateMin, dateMax, pageable);
				totalNumber = sinistreVehiculeEntityPage.getTotalElements();
			} else {
				Page<SinistreVehiculeEntity> sinistreVehiculeEntityPage = sinistreVehiculeRepository
						.getPaginationSinistreVehiculeBySelectedAnneeAndEtat(dateMin, dateMax, etat, pageable);
				totalNumber = sinistreVehiculeEntityPage.getTotalElements();
			}
		}
		return totalNumber;
	}

	@Override
	public void modifySelectedSinistreVehicule(SinistreVehiculeDTO sinistreVehiculeDTO) {
	}

	@Override
	public void deleteSelectedDocumentSinistreVehicule(Long id) {
		DocumentSinistreEntity documentSinistreEntity = documentSinistreRepository.findById(id).get();
		SinistreVehiculeEntity sinistreVehiculeEntity = documentSinistreEntity.getSinistre();
		sinistreVehiculeEntity.getDocumentsSinistre().remove(documentSinistreEntity);
		sinistreVehiculeRepository.save(sinistreVehiculeEntity);
		documentSinistreRepository.deleteById(id);
	}

	@Override
	public DocumentSinistreEntity uploadNewDocumentSinistreVehicule(Long id, DocumentSinistreDTO documentSinistreDTO) {
		ModelMapper modelMapper = new ModelMapper();
		DocumentSinistreEntity documentSinistreEntity = modelMapper.map(documentSinistreDTO,
				DocumentSinistreEntity.class);
		SinistreVehiculeEntity sinistreVehiculeEntity = sinistreVehiculeRepository.findById(id).get();
		documentSinistreEntity.setSinistre(sinistreVehiculeEntity);
		if (sinistreVehiculeEntity.getDocumentsSinistre() == null) {
			sinistreVehiculeEntity.setDocumentsSinistre(new ArrayList<>());
		}
		DocumentSinistreEntity newDoc = documentSinistreRepository.save(documentSinistreEntity);
		return newDoc;
	}

	@Override
	public String getByteDocumentSinistre(Long id) {
		DocumentSinistreEntity documentSinistreEntity = documentSinistreRepository.findById(id).get();
		return documentSinistreEntity.getAdresseDocument();
	}

	@Override
	public List<SelectVehiculeDTO> getSelectVehiculeByStrucutureForEmprunt(UserEntity userEntity) {
		List<VehiculeEntity> vehiculeEntities = new ArrayList<>();
		if (userEntity.getStructures().isEmpty()) {
			vehiculeEntities = vehiculeRepository.findAllByEmpruntsNull();
		} else {
			StructureEntity structureEntity = userEntity.getStructures().get(0);
			vehiculeEntities = vehiculeRepository.findAllByStructureAndEmpruntsIsNull(structureEntity);
		}
		return this.loadSelectVehiculeByStrucuture(vehiculeEntities);
	}

	@Override
	public List<ListBeneficiaireStructureDTO> getListBeneficiaireStructureResponse() {
		List<BeneficiaireEntity> beneficiaireEntities = (List<BeneficiaireEntity>) beneficiaireRepository.findAll();
		return this.loadListBeneficiaireStructure(beneficiaireEntities);
	}

	@Override
	public void addNewEmpruntVehicule(NewEmpruntVehiculeDTO newEmpruntVehiculeDTO) {
		BeneficiaireEntity beneficiaireEntity = beneficiaireRepository
				.findById(newEmpruntVehiculeDTO.getIdBeneficiaireEmprunt()).get();
		VehiculeEntity vehiculeEntity = vehiculeRepository.findById(newEmpruntVehiculeDTO.getIdVehicule()).get();
		EmpruntVehiculeEntity empruntVehiculeEntity = new EmpruntVehiculeEntity();
		empruntVehiculeEntity.setDateEmprunt(newEmpruntVehiculeDTO.getDateEmprunt());
		empruntVehiculeEntity.setConfirmed(false);
		empruntVehiculeEntity.setDateRetourPrevu(newEmpruntVehiculeDTO.getDateRetourPrevu());
		empruntVehiculeEntity.setDateRetourEffective(newEmpruntVehiculeDTO.getDateRetourEffective());
		empruntVehiculeEntity.setDateRetourEffective(newEmpruntVehiculeDTO.getDateRetourEffective());
		empruntVehiculeEntity.setVehicule(vehiculeEntity);
		if (vehiculeEntity.getEmprunts().isEmpty()) {
			vehiculeEntity.setEmprunts(new ArrayList<>());
		}
		vehiculeEntity.getEmprunts().add(empruntVehiculeEntity);
		empruntVehiculeEntity.setVehicule(vehiculeEntity);
		empruntVehiculeEntity.setBeneficiaire(beneficiaireEntity);
		beneficiaireEntity.setEmprunt(empruntVehiculeEntity);
		empruntVehiculeRepository.save(empruntVehiculeEntity);
	}

	@Override
	public List<EmpruntVehiculeTableDataDTO> getPaginationListEmpruntVehiculeBySelectedStatusAndYear(String etat,
			String annee, int page, int limit) throws ParseException {
		List<EmpruntVehiculeEntity> empruntVehiculeEntities = new ArrayList<>();
		PageRequest pageable = PageRequest.of(page, limit);
		if (annee.equals("tousAnnee")) {
			if (etat.equals("tousEtats")) {
				Page<EmpruntVehiculeEntity> reservationVehiculeEntityPage = empruntVehiculeRepository
						.getPaginationListEmpruntVehicule(pageable);
				empruntVehiculeEntities = reservationVehiculeEntityPage.getContent();
			} else {
				Page<EmpruntVehiculeEntity> reservationVehiculeEntityPage = empruntVehiculeRepository
						.getPaginationListEmpruntVehiculeBySelectedState(Boolean.parseBoolean(etat), pageable);
				empruntVehiculeEntities = reservationVehiculeEntityPage.getContent();
			}
		} else {
			LocalDate dateMin = LocalDate.of(Integer.parseInt(annee), 1, 1);
			LocalDate dateMax = LocalDate.of(Integer.parseInt(annee), 12, 31);
			if (etat.equals("tousEtats")) {
				Page<EmpruntVehiculeEntity> reservationVehiculeEntityPage = empruntVehiculeRepository
						.getPaginationListEmpruntVehiculeBySelectedYear(dateMin, dateMax, pageable);
				empruntVehiculeEntities = reservationVehiculeEntityPage.getContent();
			} else {
				Page<EmpruntVehiculeEntity> reservationVehiculeEntityPage = empruntVehiculeRepository
						.getPaginationListEmpruntVehiculeBySelectedStateAndYear(Boolean.parseBoolean(etat), dateMin,
								dateMax, pageable);
				empruntVehiculeEntities = reservationVehiculeEntityPage.getContent();
			}
		}
		return this.loadEmpruntVehiculeTableData(empruntVehiculeEntities);
	}

	@Override
	public Long getTotalItemListEmpruntVehiculeBySelectedStatusAndYear(String etat, String annee, int page, int limit)
			throws ParseException {
		Long totalItems;
		List<EmpruntVehiculeEntity> empruntVehiculeEntities = new ArrayList<>();
		PageRequest pageable = PageRequest.of(page, limit);
		if (annee.equals("tousAnnee")) {
			if (etat.equals("tousEtats")) {
				Page<EmpruntVehiculeEntity> reservationVehiculeEntityPage = empruntVehiculeRepository
						.getPaginationListEmpruntVehicule(pageable);
				totalItems = reservationVehiculeEntityPage.getTotalElements();
			} else {
				Page<EmpruntVehiculeEntity> reservationVehiculeEntityPage = empruntVehiculeRepository
						.getPaginationListEmpruntVehiculeBySelectedState(Boolean.parseBoolean(etat), pageable);
				totalItems = reservationVehiculeEntityPage.getTotalElements();
			}
		} else {
			LocalDate dateMin = LocalDate.of(Integer.parseInt(annee), 1, 1);
			LocalDate dateMax = LocalDate.of(Integer.parseInt(annee), 12, 31);
			if (etat.equals("tousEtats")) {
				Page<EmpruntVehiculeEntity> reservationVehiculeEntityPage = empruntVehiculeRepository
						.getPaginationListEmpruntVehiculeBySelectedYear(dateMin, dateMax, pageable);
				totalItems = reservationVehiculeEntityPage.getTotalElements();
			} else {
				Page<EmpruntVehiculeEntity> reservationVehiculeEntityPage = empruntVehiculeRepository
						.getPaginationListEmpruntVehiculeBySelectedStateAndYear(Boolean.parseBoolean(etat), dateMin,
								dateMax, pageable);
				totalItems = reservationVehiculeEntityPage.getTotalElements();
			}
		}
		return totalItems;
	}

	@Override
	public void confirmSelectedEmpruntVehicule(Long id) {
		EmpruntVehiculeEntity empruntVehiculeEntity = empruntVehiculeRepository.findById(id).get();
		empruntVehiculeEntity.setConfirmed(true);
		empruntVehiculeRepository.save(empruntVehiculeEntity);
	}

	private List<SelectVehiculeDTO> loadSelectVehiculeByStrucuture(List<VehiculeEntity> vehiculeEntities) {
		List<SelectVehiculeDTO> selectVehiculeDTOS = new ArrayList<>();
		if (!vehiculeEntities.isEmpty()) {
			vehiculeEntities.forEach(vehiculeEntity -> {
				SelectVehiculeDTO selectVehiculeDTO = new SelectVehiculeDTO();
				selectVehiculeDTO.setId(vehiculeEntity.getId());
				selectVehiculeDTO.setNumeroPlaque(vehiculeEntity.getNumeroPlaque());
				selectVehiculeDTO.setCodeStructure(vehiculeEntity.getStructure().getCode());
				selectVehiculeDTO.setDesignationStructure(vehiculeEntity.getStructure().getDesignation());
				if (vehiculeEntity.getBeneficiaire() != null) {
					selectVehiculeDTO.setIdBeneficiaire(vehiculeEntity.getBeneficiaire().getId());
					selectVehiculeDTO.setNomBeneficiaire(vehiculeEntity.getBeneficiaire().getNom());
					selectVehiculeDTO.setMatriculeBeneficiaire(vehiculeEntity.getBeneficiaire().getMatricule());
					selectVehiculeDTO.setAgePermis(vehiculeEntity.getBeneficiaire().getAgePermis());
				}
				selectVehiculeDTOS.add(selectVehiculeDTO);
			});
		}
		return selectVehiculeDTOS;
	}

	private List<ReservationVehiculeTableDataDTO> loadReservationVehiculeTableDataDTO(
			List<ReservationVehiculeEntity> reservationVehiculeEntities) {
		List<ReservationVehiculeTableDataDTO> reservationVehiculeTableDataDTOS = new ArrayList<>();
		if (!reservationVehiculeEntities.isEmpty()) {
			reservationVehiculeEntities.forEach(reservationVehiculeEntity -> {
				ReservationVehiculeTableDataDTO reservationVehiculeTableDataDTO = new ReservationVehiculeTableDataDTO();
				reservationVehiculeTableDataDTO.setId(reservationVehiculeEntity.getId());
				reservationVehiculeTableDataDTO.setIdVehicule(reservationVehiculeEntity.getVehicule().getId());
				reservationVehiculeTableDataDTO
						.setNumeroPlaque(reservationVehiculeEntity.getVehicule().getNumeroPlaque());
				reservationVehiculeTableDataDTO
						.setCodeStructure(reservationVehiculeEntity.getVehicule().getStructure().getCode());
				reservationVehiculeTableDataDTO.setDesignationStructure(
						reservationVehiculeEntity.getVehicule().getStructure().getDesignation());
				reservationVehiculeTableDataDTO
						.setDateDebutReservation(reservationVehiculeEntity.getDateDebutReservation());
				reservationVehiculeTableDataDTO
						.setDateFinReservation(reservationVehiculeEntity.getDateFinReservation());
				reservationVehiculeTableDataDTO
						.setDateDemandeReservation(reservationVehiculeEntity.getDateDemandeReservation());
				reservationVehiculeTableDataDTO.setConfirmed(reservationVehiculeEntity.isConfirmed());
				reservationVehiculeTableDataDTO.setObjet(reservationVehiculeEntity.getObjet());
				if (reservationVehiculeEntity.getDateConfirmationDemandeReservation() != null) {
					reservationVehiculeTableDataDTO.setDateConfirmationDemandeReservation(
							reservationVehiculeEntity.getDateConfirmationDemandeReservation());
				}
				reservationVehiculeTableDataDTOS.add(reservationVehiculeTableDataDTO);
			});
		}
		return reservationVehiculeTableDataDTOS;
	}

	private List<LocationVehiculeTableDataDTO> loadLocationVehiculeTableData(
			List<LocationVehiculeEntity> locationVehiculeEntities) {
		List<LocationVehiculeTableDataDTO> locationVehiculeTableDataDTOS = new ArrayList<>();
		if (!locationVehiculeEntities.isEmpty()) {
			locationVehiculeEntities.forEach(locationVehiculeEntity -> {
				LocationVehiculeTableDataDTO locationVehiculeTableDataDTO = new LocationVehiculeTableDataDTO();
				locationVehiculeTableDataDTO.setId(locationVehiculeEntity.getId());
				locationVehiculeTableDataDTO.setSocieteLocation(locationVehiculeEntity.getSocieteLocation());
				locationVehiculeTableDataDTO
						.setNumeroImmatriculation(locationVehiculeEntity.getNumeroImmatriculation());
				locationVehiculeTableDataDTO.setNumeroChassis(locationVehiculeEntity.getNumeroChassis());
				locationVehiculeTableDataDTO.setNumeroPlaque(locationVehiculeEntity.getNumeroPlaque());
				locationVehiculeTableDataDTO.setMarche(locationVehiculeEntity.getMarche());
				locationVehiculeTableDataDTO.setEnergie(locationVehiculeEntity.getEnergie().getDescription());
				if (locationVehiculeEntity.getGenre() != null) {
					locationVehiculeTableDataDTO.setGenre(locationVehiculeEntity.getGenre().getDesignation());
				}
				if (locationVehiculeEntity.getMarque() != null) {
					locationVehiculeTableDataDTO.setMarque(locationVehiculeEntity.getMarque().getDesignation());
				}
				locationVehiculeTableDataDTO.setIndexKM(locationVehiculeEntity.getIndexKM());
				locationVehiculeTableDataDTO.setAffectation(locationVehiculeEntity.getAffectation());
				locationVehiculeTableDataDTO.setDateDebutLocation(locationVehiculeEntity.getDateDebutLocation());
				locationVehiculeTableDataDTO.setDateFinLocation(locationVehiculeEntity.getDateFinLocation());
				locationVehiculeTableDataDTO.setCodeStructure(locationVehiculeEntity.getStructure().getCode());
				locationVehiculeTableDataDTO
						.setDesignationStructure(locationVehiculeEntity.getStructure().getDesignation());
				locationVehiculeTableDataDTOS.add(locationVehiculeTableDataDTO);
			});
		}
		return locationVehiculeTableDataDTOS;
	}

	List<ListBeneficiaireStructureDTO> loadListBeneficiaireStructure(List<BeneficiaireEntity> beneficiaireEntities) {
		List<ListBeneficiaireStructureDTO> listBeneficiaireStructureDTOS = new ArrayList<>();
		if (!beneficiaireEntities.isEmpty()) {
			beneficiaireEntities.forEach(beneficiaireEntity -> {
				ListBeneficiaireStructureDTO listBeneficiaireStructureDTO = new ListBeneficiaireStructureDTO();
				listBeneficiaireStructureDTO.setIdBeneficiaire(beneficiaireEntity.getId());
				listBeneficiaireStructureDTO.setNomBeneficiaire(beneficiaireEntity.getNom());
				listBeneficiaireStructureDTO.setMatriculeBeneficiaire(beneficiaireEntity.getMatricule());
				listBeneficiaireStructureDTOS.add(listBeneficiaireStructureDTO);
				if (!beneficiaireEntity.getVehicules().isEmpty()) {
					listBeneficiaireStructureDTO
							.setIdStrucuture(beneficiaireEntity.getVehicules().get(0).getStructure().getId());
					listBeneficiaireStructureDTO
							.setCodeStrucuture(beneficiaireEntity.getVehicules().get(0).getStructure().getCode());
					listBeneficiaireStructureDTO.setDesignationStrucuture(
							beneficiaireEntity.getVehicules().get(0).getStructure().getDesignation());
				}
			});
		}
		return listBeneficiaireStructureDTOS;
	}

	List<EmpruntVehiculeTableDataDTO> loadEmpruntVehiculeTableData(
			List<EmpruntVehiculeEntity> empruntVehiculeEntities) {
		List<EmpruntVehiculeTableDataDTO> empruntVehiculeTableDataDTOS = new ArrayList<>();
		if (!empruntVehiculeEntities.isEmpty()) {
			empruntVehiculeEntities.forEach(empruntVehiculeEntity -> {
				EmpruntVehiculeTableDataDTO empruntVehiculeTableDataDTO = new EmpruntVehiculeTableDataDTO();
				empruntVehiculeTableDataDTO.setId(empruntVehiculeEntity.getId());
				empruntVehiculeTableDataDTO.setIdVehicule(empruntVehiculeEntity.getVehicule().getId());
				empruntVehiculeTableDataDTO.setNumeroPlaque(empruntVehiculeEntity.getVehicule().getNumeroPlaque());
				empruntVehiculeTableDataDTO
						.setCodeStructureInitiale(empruntVehiculeEntity.getVehicule().getStructure().getCode());
				empruntVehiculeTableDataDTO.setDesignationStructureInitiale(
						empruntVehiculeEntity.getVehicule().getStructure().getDesignation());
				if (empruntVehiculeEntity.getVehicule().getBeneficiaire() != null) {
					empruntVehiculeTableDataDTO.setMatriculeBeneficiaireInitiale(
							empruntVehiculeEntity.getVehicule().getBeneficiaire().getMatricule());
					empruntVehiculeTableDataDTO
							.setNomBeneficiaireInitiale(empruntVehiculeEntity.getVehicule().getBeneficiaire().getNom());
				}
				empruntVehiculeTableDataDTO
						.setMatriculeBeneficiaire4Emprunt(empruntVehiculeEntity.getBeneficiaire().getMatricule());
				empruntVehiculeTableDataDTO
						.setNomBeneficiaire4Emprunt(empruntVehiculeEntity.getBeneficiaire().getNom());
				empruntVehiculeTableDataDTO.setDateEmprunt(empruntVehiculeEntity.getDateEmprunt());
				empruntVehiculeTableDataDTO.setDateRetourPrevu(empruntVehiculeEntity.getDateRetourPrevu());
				empruntVehiculeTableDataDTO.setConfirmed(empruntVehiculeEntity.isConfirmed());
				if (empruntVehiculeEntity.getDateRetourEffective() != null) {
					empruntVehiculeTableDataDTO.setDateRetourEffective(empruntVehiculeEntity.getDateRetourEffective());
				}
				empruntVehiculeTableDataDTOS.add(empruntVehiculeTableDataDTO);
			});
		}
		return empruntVehiculeTableDataDTOS;
	}

	@Override
	public void deleteSelectedSinistreVehicule(Long id) {
		SinistreVehiculeEntity sinistreVehiculeEntity = sinistreVehiculeRepository.findById(id).get();
		VehiculeEntity vehiculeEntity = sinistreVehiculeEntity.getVehicule();
		vehiculeEntity.setSinistre(null);
		sinistreVehiculeEntity.setVehicule(null);
		vehiculeRepository.save(vehiculeEntity);
		if (sinistreVehiculeEntity.getExpert() != null) {
			ExpertEntity expertEntity = sinistreVehiculeEntity.getExpert();
			expertEntity.getSinistres().remove(sinistreVehiculeEntity);
			sinistreVehiculeRepository.save(sinistreVehiculeEntity);
		}
		sinistreVehiculeRepository.deleteById(id);
	}

	@Override
	public void modifySelectedDemandeReservationVehicule(
			ReservationVehiculeTableDataDTO reservationVehiculeTableDataDTO) {
		ReservationVehiculeEntity reservationVehiculeEntity = reservationVehiculeRepository
				.findById(reservationVehiculeTableDataDTO.getId()).get();
		reservationVehiculeEntity.setObjet(reservationVehiculeTableDataDTO.getObjet());
		reservationVehiculeEntity.setDateDebutReservation(reservationVehiculeTableDataDTO.getDateDebutReservation());
		reservationVehiculeEntity.setDateFinReservation(reservationVehiculeTableDataDTO.getDateFinReservation());
		reservationVehiculeRepository.save(reservationVehiculeEntity);
	}

	List<SinistreVehiculeTableDataDTO> loadSinistreVehiculeTableData(
			List<SinistreVehiculeEntity> sinistreVehiculeEntities) {
		List<SinistreVehiculeTableDataDTO> sinistreVehiculeTableDataDTOS = new ArrayList<>();
		if (!sinistreVehiculeEntities.isEmpty()) {
			sinistreVehiculeEntities.forEach(sinistreVehiculeEntity -> {
				SinistreVehiculeTableDataDTO sinistreVehiculeTableDataDTO = new SinistreVehiculeTableDataDTO();
				sinistreVehiculeTableDataDTO.setId(sinistreVehiculeEntity.getId());
				sinistreVehiculeTableDataDTO.setNumeroPlaque(sinistreVehiculeEntity.getVehicule().getNumeroPlaque());
				sinistreVehiculeTableDataDTO
						.setCodeStructure(sinistreVehiculeEntity.getVehicule().getStructure().getCode());
				sinistreVehiculeTableDataDTO
						.setDesignationStructure(sinistreVehiculeEntity.getVehicule().getStructure().getDesignation());
				if (sinistreVehiculeEntity.getVehicule().getBeneficiaire() != null) {
					sinistreVehiculeTableDataDTO
							.setIdBeneficiaire(sinistreVehiculeEntity.getVehicule().getBeneficiaire().getId());
					sinistreVehiculeTableDataDTO.setMatriculeBeneficiaire(
							sinistreVehiculeEntity.getVehicule().getBeneficiaire().getMatricule());
					sinistreVehiculeTableDataDTO
							.setNomBeneficiaire(sinistreVehiculeEntity.getVehicule().getBeneficiaire().getNom());
				}
				sinistreVehiculeTableDataDTO.setNumeroSinistre(sinistreVehiculeEntity.getNumeroSinistre());
				sinistreVehiculeTableDataDTO.setLieuSinistre(sinistreVehiculeEntity.getLieuSinistre());
				sinistreVehiculeTableDataDTO.setCauseSinistre(sinistreVehiculeEntity.getLieuSinistre());
				sinistreVehiculeTableDataDTO.setNatureSinistre(sinistreVehiculeEntity.getNatureSinistre());
				sinistreVehiculeTableDataDTO.setTier(sinistreVehiculeEntity.getTier());
				sinistreVehiculeTableDataDTO.setAdresseAssurance(sinistreVehiculeEntity.getAdresseAssurance());
				sinistreVehiculeTableDataDTO.setAssurance(sinistreVehiculeEntity.getAssurance());
				sinistreVehiculeTableDataDTO.setCircule(sinistreVehiculeEntity.isCircule());
				sinistreVehiculeTableDataDTO.setAgePermis(sinistreVehiculeEntity.getAgePermis());
				sinistreVehiculeTableDataDTO.setIdVehicule(sinistreVehiculeEntity.getVehicule().getId());
				if (sinistreVehiculeEntity.getDateSinistre() != null) {
					sinistreVehiculeTableDataDTO.setDateSinistre(sinistreVehiculeEntity.getDateSinistre());
				}
				if (sinistreVehiculeEntity.getDateNotification() != null) {
					sinistreVehiculeTableDataDTO.setDateNotification(sinistreVehiculeEntity.getDateNotification());
				}
				if (sinistreVehiculeEntity.getDateExpertise() != null) {
					sinistreVehiculeTableDataDTO.setDateExpertise(sinistreVehiculeEntity.getDateExpertise());
				}
				if (sinistreVehiculeEntity.getDateReexpertise() != null) {
					sinistreVehiculeTableDataDTO.setDateReexpertise(sinistreVehiculeEntity.getDateReexpertise());
				}
				if (sinistreVehiculeEntity.getDateDebut() != null) {
					sinistreVehiculeTableDataDTO.setDateDebut(sinistreVehiculeEntity.getDateDebut());
				}
				if (sinistreVehiculeEntity.getDateFin() != null) {
					sinistreVehiculeTableDataDTO.setDateFin(sinistreVehiculeEntity.getDateFin());
				}
				if (sinistreVehiculeEntity.getExpert() != null) {
					sinistreVehiculeTableDataDTO.setIdExpert(sinistreVehiculeEntity.getExpert().getId());
				}
				sinistreVehiculeTableDataDTO.setMontantReparation(sinistreVehiculeEntity.getMontantReparation());
				sinistreVehiculeTableDataDTO.setMontantIndemnite(sinistreVehiculeEntity.getMontantIndemnite());
				sinistreVehiculeTableDataDTO.setObservations(sinistreVehiculeEntity.getObservations());
				sinistreVehiculeTableDataDTOS.add(sinistreVehiculeTableDataDTO);
			});
		}
		return sinistreVehiculeTableDataDTOS;
	}

	@Override
	public void deleteSelectedEmpruntVehicule(Long id) {
		EmpruntVehiculeEntity empruntVehiculeEntity = empruntVehiculeRepository.findById(id).get();
		VehiculeEntity vehiculeEntity = empruntVehiculeEntity.getVehicule();
		vehiculeEntity.getEmprunts().remove(empruntVehiculeEntity);
		BeneficiaireEntity beneficiaireEntity = empruntVehiculeEntity.getBeneficiaire();
		beneficiaireEntity.setEmprunt(null);
		empruntVehiculeEntity.setBeneficiaire(null);
		beneficiaireRepository.save(beneficiaireEntity);
		empruntVehiculeRepository.deleteById(id);
	}

	@Override
	public void modifySelectedEmpruntVehicule(NewEmpruntVehiculeDTO newEmpruntVehiculeDTO) {
		EmpruntVehiculeEntity empruntVehiculeEntity = empruntVehiculeRepository.findById(newEmpruntVehiculeDTO.getId())
				.get();
		empruntVehiculeEntity.setDateEmprunt(newEmpruntVehiculeDTO.getDateEmprunt());
		if (newEmpruntVehiculeDTO.getDateRetourPrevu() != null) {
			empruntVehiculeEntity.setDateRetourPrevu(newEmpruntVehiculeDTO.getDateRetourPrevu());
		}
		if (newEmpruntVehiculeDTO.getDateRetourEffective() != null) {
			empruntVehiculeEntity.setDateRetourEffective(newEmpruntVehiculeDTO.getDateRetourEffective());
		}
		empruntVehiculeRepository.save(empruntVehiculeEntity);
	}

	@Override
	public String onChangeUGPlocation(Long id) {
		Optional<StructureEntity> e = structureRepository.findById(id);
		if (!e.isEmpty())
			return e.get().getUgp().getDesignation();
		return "haha";
	}

	@Override
	public List<DocumentSinistreEntity> loadAllDocumentSinistres(Long id) {
		SinistreVehiculeEntity sinistre = sinistreVehiculeRepository.findById(id).get();
		return documentSinistreRepository.findAllBySinistre(sinistre);
	}
}
