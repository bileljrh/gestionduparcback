package com.gesparc.controllers;

import com.gesparc.entities.exploitation.DocumentSinistreEntity;
import com.gesparc.entities.exploitation.EmpruntVehiculeEntity;
import com.gesparc.entities.exploitation.SinistreVehiculeEntity;
import com.gesparc.entities.referentiel.StructureEntity;
import com.gesparc.entities.referentiel.UgpEntity;
import com.gesparc.repositories.exploitation.EmpruntVehiculeRepository;
import com.gesparc.repositories.exploitation.SinistreVehiculeRepository;
import com.gesparc.repositories.referentiel.StructureRepository;
import com.gesparc.repositories.referentiel.UgpRepository;
import com.gesparc.requests.Administratif.Additionnel.ReservationVehiculeTableDataRequest;
import com.gesparc.requests.Exploitation.Additionnel.NewEmpruntVehiculeRequest;
import com.gesparc.requests.Exploitation.Additionnel.NewLocationVehiculeRequest;
import com.gesparc.requests.Exploitation.Additionnel.NewSinistreVehiculeRequest;
import com.gesparc.requests.referentiel.StructureRequest;
import com.gesparc.responses.administratif.additionnel.SelectVehiculeResponse;
import com.gesparc.responses.exploitation.additional.*;
import com.gesparc.security.entity.UserEntity;
import com.gesparc.security.repository.UserRepository;
import com.gesparc.servicesImpl.ExploitationImpl;
import com.gesparc.sharedDTO.administratif.Additionnel.SelectVehiculeDTO;
import com.gesparc.sharedDTO.exploitation.DocumentSinistreDTO;
import com.gesparc.sharedDTO.exploitation.additionnel.*;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.FilenameUtils;
import org.modelmapper.ModelMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.InputStreamResource;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import com.gesparc.entities.exploitation.DocumentSinistreEntity;
import com.gesparc.entities.exploitation.EmpruntVehiculeEntity;
import com.gesparc.entities.exploitation.SinistreVehiculeEntity;
import com.gesparc.entities.referentiel.StructureEntity;
import com.gesparc.entities.referentiel.UgpEntity;
import com.gesparc.repositories.exploitation.EmpruntVehiculeRepository;
import com.gesparc.repositories.exploitation.SinistreVehiculeRepository;
import com.gesparc.repositories.referentiel.StructureRepository;
import com.gesparc.repositories.referentiel.UgpRepository;
import com.gesparc.requests.Administratif.Additionnel.ReservationVehiculeTableDataRequest;
import com.gesparc.requests.Exploitation.Additionnel.NewEmpruntVehiculeRequest;
import com.gesparc.requests.Exploitation.Additionnel.NewLocationVehiculeRequest;
import com.gesparc.requests.Exploitation.Additionnel.NewSinistreVehiculeRequest;
import com.gesparc.requests.referentiel.StructureRequest;
import com.gesparc.responses.administratif.additionnel.SelectVehiculeResponse;
import com.gesparc.responses.exploitation.additional.*;
import com.gesparc.security.entity.UserEntity;
import com.gesparc.security.repository.UserRepository;
import com.gesparc.servicesImpl.ExploitationImpl;
import com.gesparc.sharedDTO.administratif.Additionnel.SelectVehiculeDTO;
import com.gesparc.sharedDTO.exploitation.DocumentSinistreDTO;
import com.gesparc.sharedDTO.exploitation.additionnel.*;

import java.io.File;
import java.io.IOException;
import java.text.ParseException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

@CrossOrigin(origins = "*")
@RestController
@RequestMapping()
public class ExploitationController {

	Logger logger = LoggerFactory.getLogger(ExploitationController.class);

	@Autowired
	ExploitationImpl exploitation;

	@Autowired
	UserRepository userRepository;

	@Autowired
	private StructureRepository structureRepository;

	@Autowired
	private TracabiliteController tracabiliteController;

	@Autowired
	private UgpRepository ugpRepository;

	@Autowired
	private SinistreVehiculeRepository sinistreVehiculeRepository;

	@Autowired
	private EmpruntVehiculeRepository empruntVehiculeRepository;

	@GetMapping(path = "/select_vehicule_reservation")
	ResponseEntity<List<SelectVehiculeResponse>> getSelectVehiculeByStrucutureForReservation() {
		List<SelectVehiculeResponse> selectVehiculeResponses = new ArrayList<>();
		ModelMapper modelMapper = new ModelMapper();
		UserEntity userEntity = userRepository
				.findFirstByMatricule(SecurityContextHolder.getContext().getAuthentication().getPrincipal().toString());
		List<SelectVehiculeDTO> selectVehiculeDTOS = exploitation
				.getSelectVehiculeByStrucutureForReservation(userEntity);
		if (!selectVehiculeDTOS.isEmpty()) {
			selectVehiculeDTOS.forEach(selectVehiculeDTO -> {
				selectVehiculeResponses.add(modelMapper.map(selectVehiculeDTO, SelectVehiculeResponse.class));
			});
		}
		return new ResponseEntity<>(selectVehiculeResponses, HttpStatus.OK);
	}

	@PostMapping(path = "/demande_reservation_vehicule")
	ResponseEntity<HttpStatus> addNewDemandeReservationVehicule(
			@RequestBody ReservationVehiculeTableDataRequest reservationVehiculeTableDataRequest) {
		ModelMapper modelMapper = new ModelMapper();
		ReservationVehiculeTableDataDTO reservationVehiculeTableDataDTO = modelMapper
				.map(reservationVehiculeTableDataRequest, ReservationVehiculeTableDataDTO.class);
		exploitation.addNewDemandeReservationVehicule(reservationVehiculeTableDataDTO);
		tracabiliteController.addNewDemandeReservationVehiculeTracabilite(
				SecurityContextHolder.getContext().getAuthentication().getPrincipal().toString());
		return new ResponseEntity<>(HttpStatus.OK);
	}

	@GetMapping(path = "/onchange/ugp/{id}")
	UgpEntity onChangeUgp(@PathVariable Long id) {
		return ugpRepository.findAllVehicule(id);
	}

	@PutMapping(path = "/demande_reservation_vehicule")
	ResponseEntity<HttpStatus> modifySelectedDemandeReservationVehicule(
			@RequestBody ReservationVehiculeTableDataRequest reservationVehiculeTableDataRequest) {
		ModelMapper modelMapper = new ModelMapper();
		ReservationVehiculeTableDataDTO reservationVehiculeTableDataDTO = modelMapper
				.map(reservationVehiculeTableDataRequest, ReservationVehiculeTableDataDTO.class);
		exploitation.modifySelectedDemandeReservationVehicule(reservationVehiculeTableDataDTO);
		tracabiliteController.modifySelectedDemandeReservationVehiculeTracabilite(
				SecurityContextHolder.getContext().getAuthentication().getPrincipal().toString());

		return new ResponseEntity<>(HttpStatus.OK);
	}

	@GetMapping(path = "/list_reservation_vehicule")
	ResponseEntity<List<ReservationVehiculeTableDataResponse>> getPaginationListReservationVehiculeBySelectedStatus(
			@RequestParam(value = "status") String status, @RequestParam(value = "page") String page,
			@RequestParam(value = "limit") String limit) throws ParseException {
		ModelMapper modelMapper = new ModelMapper();
		List<ReservationVehiculeTableDataResponse> reservationVehiculeTableDataResponses = new ArrayList<>();
		List<ReservationVehiculeTableDataDTO> reservationVehiculeTableDataDTOS = exploitation
				.getPaginationListReservationVehiculeBySelectedStatus(status, Integer.parseInt(page),
						Integer.parseInt(limit));
		if (!reservationVehiculeTableDataDTOS.isEmpty()) {
			reservationVehiculeTableDataDTOS.forEach(reservationVehiculeTableDataDTO -> {
				reservationVehiculeTableDataResponses.add(
						modelMapper.map(reservationVehiculeTableDataDTO, ReservationVehiculeTableDataResponse.class));
			});
		}
		return new ResponseEntity<>(reservationVehiculeTableDataResponses, HttpStatus.OK);
	}

	@GetMapping(path = "/total_number_reservation_vehicule")
	ResponseEntity<Long> getTotalNumberListReservationVehiculeBySelectedStatus(
			@RequestParam(value = "status") String status, @RequestParam(value = "page") String page,
			@RequestParam(value = "limit") String limit) throws ParseException {
		Long totalItem;
		totalItem = exploitation.getTotalNumberListReservationVehiculeBySelectedStatus(status, Integer.parseInt(page),
				Integer.parseInt(limit));
		return new ResponseEntity<>(totalItem, HttpStatus.OK);
	}

	@DeleteMapping(path = "/reservation_vehicule/{id}")
	ResponseEntity<HttpStatus> deleteSelectedReservationVehicule(@PathVariable Long id) {
		exploitation.deleteSelectedReservationVehicule(id);
		tracabiliteController.deleteSelectedReservationVehiculeTracabilite(
				SecurityContextHolder.getContext().getAuthentication().getPrincipal().toString());

		return new ResponseEntity<>(HttpStatus.OK);
	}

	@PutMapping(path = "/reservation_vehicule")
	void confirmSelectedReservationVehicule(@RequestBody Long id) {
		exploitation.confirmSelectedReservationVehicule(id);
	}

	@PostMapping(path = "/location_vehicule")
	ResponseEntity<HttpStatus> addNewLocationVehicule(
			@RequestBody NewLocationVehiculeRequest newLocationVehiculeRequest) {
		ModelMapper modelMapper = new ModelMapper();
		NewLocationVehiculeDTO newLocationVehiculeDTO = modelMapper.map(newLocationVehiculeRequest,
				NewLocationVehiculeDTO.class);
		exploitation.addNewLocationVehicule(newLocationVehiculeDTO);
		tracabiliteController.addNewLocationVehiculeTracabilite(
				SecurityContextHolder.getContext().getAuthentication().getPrincipal().toString());
		return new ResponseEntity<>(HttpStatus.OK);
	}

	@PutMapping(path = "/location_vehicule")
	ResponseEntity<HttpStatus> modifySelectedLocationVehicule(
			@RequestBody NewLocationVehiculeRequest newLocationVehiculeRequest) {
		ModelMapper modelMapper = new ModelMapper();
		NewLocationVehiculeDTO newLocationVehiculeDTO = modelMapper.map(newLocationVehiculeRequest,
				NewLocationVehiculeDTO.class);
		exploitation.modifySelectedLocationVehicule(newLocationVehiculeDTO);
		tracabiliteController.modifySelectedLocationVehiculeTracabilite(
				SecurityContextHolder.getContext().getAuthentication().getPrincipal().toString());
		return new ResponseEntity<>(HttpStatus.OK);
	}

	@DeleteMapping(path = "/location_vehicule/{id}")
	ResponseEntity<HttpStatus> deleteSelectedLocationVehicule(@PathVariable Long id) {
		exploitation.deleteSelectedLocationVehicule(id);
		tracabiliteController.deleteSelectedLocationVehiculeTracabilite(
				SecurityContextHolder.getContext().getAuthentication().getPrincipal().toString());

		return new ResponseEntity<>(HttpStatus.OK);
	}

	@GetMapping(path = "/pagination_location_vehicule")
	ResponseEntity<List<LocationVehiculeTableDataResponse>> getPaginationLocationVehiculeList(
			@RequestParam(value = "dateMin") String dateMin, @RequestParam(value = "dateMax") String dateMax,
			@RequestParam(value = "page") String page, @RequestParam(value = "limit") String limit)
			throws ParseException {
		UserEntity userEntity = userRepository
				.findFirstByMatricule(SecurityContextHolder.getContext().getAuthentication().getPrincipal().toString());
		ModelMapper modelMapper = new ModelMapper();
		List<LocationVehiculeTableDataResponse> locationVehiculeTableDataResponses = new ArrayList<>();
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
		List<LocationVehiculeTableDataDTO> locationVehiculeTableDataDTOS = exploitation
				.getPaginationLocationVehiculeList(userEntity, LocalDate.parse(dateMin, formatter),
						LocalDate.parse(dateMax, formatter), Integer.parseInt(page), Integer.parseInt(limit));
		if (!locationVehiculeTableDataDTOS.isEmpty()) {
			locationVehiculeTableDataDTOS.forEach(locationVehiculeTableDataDTO -> {
				locationVehiculeTableDataResponses
						.add(modelMapper.map(locationVehiculeTableDataDTO, LocationVehiculeTableDataResponse.class));
			});
		}
		return new ResponseEntity<>(locationVehiculeTableDataResponses, HttpStatus.OK);
	}

	@GetMapping(path = "/total_number_location_vehicule")
	ResponseEntity<Long> getTotalNumberLocationVehiculeList(@RequestParam(value = "dateMin") String dateMin,
			@RequestParam(value = "dateMax") String dateMax) throws ParseException {
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
		UserEntity userEntity = userRepository
				.findFirstByMatricule(SecurityContextHolder.getContext().getAuthentication().getPrincipal().toString());
		Long totalNumber = exploitation.getTotalNumberLocationVehiculeList(userEntity,
				LocalDate.parse(dateMin, formatter), LocalDate.parse(dateMax, formatter));
		return new ResponseEntity<>(totalNumber, HttpStatus.OK);
	}

	@GetMapping(path = "/select_vehicule_sinistre")
	ResponseEntity<List<SelectVehiculeResponse>> getSelectVehiculeByStrucutureForSinistre() {
		List<SelectVehiculeResponse> selectVehiculeResponses = new ArrayList<>();
		ModelMapper modelMapper = new ModelMapper();
		UserEntity userEntity = userRepository
				.findFirstByMatricule(SecurityContextHolder.getContext().getAuthentication().getPrincipal().toString());
		List<SelectVehiculeDTO> selectVehiculeDTOS = exploitation.getSelectVehiculeByStrucutureForSinistre(userEntity);
		if (!selectVehiculeDTOS.isEmpty()) {
			selectVehiculeDTOS.forEach(selectVehiculeDTO -> {
				selectVehiculeResponses.add(modelMapper.map(selectVehiculeDTO, SelectVehiculeResponse.class));
			});
		}
		return new ResponseEntity<>(selectVehiculeResponses, HttpStatus.OK);
	}

	@PostMapping(path = "/sinistre_vehicule")
	ResponseEntity<HttpStatus> addNewSinistreVehicule(
			@RequestBody NewSinistreVehiculeRequest newSinistreVehiculeRequest) {
		ModelMapper modelMapper = new ModelMapper();
		NewSinistreVehiculeDTO newSinistreVehiculeDTO = modelMapper.map(newSinistreVehiculeRequest,
				NewSinistreVehiculeDTO.class);
		exploitation.addNewSinistreVehicule(newSinistreVehiculeDTO);
		tracabiliteController.addNewSinistreVehiculeTracabilite(newSinistreVehiculeDTO.getNatureSinistre(),
				SecurityContextHolder.getContext().getAuthentication().getPrincipal().toString());
		return new ResponseEntity<>(HttpStatus.OK);
	}

	@PutMapping(path = "/sinistre_vehicule")
	ResponseEntity<HttpStatus> modifySelectedSinistreVehicule(
			@RequestBody NewSinistreVehiculeRequest newSinistreVehiculeRequest) {
		ModelMapper modelMapper = new ModelMapper();
		NewSinistreVehiculeDTO newSinistreVehiculeDTO = modelMapper.map(newSinistreVehiculeRequest,
				NewSinistreVehiculeDTO.class);
		exploitation.modifySelectedSinistreVehicule(newSinistreVehiculeDTO);
		tracabiliteController.modifySelectedSinistreVehiculeTracabilite(newSinistreVehiculeDTO.getNumeroSinistre(),
				SecurityContextHolder.getContext().getAuthentication().getPrincipal().toString());
		return new ResponseEntity<>(HttpStatus.OK);
	}

	@GetMapping(path = "/pagination_sinistre_vehicule")
	ResponseEntity<List<SinistreVehiculeTableDataResponse>> getPaginationListSinistreVehicule(
			@RequestParam(value = "etat") String etat, @RequestParam(value = "annee") String annee,
			@RequestParam(value = "page") String page, @RequestParam(value = "limit") String limit) {
		ModelMapper modelMapper = new ModelMapper();
		List<SinistreVehiculeTableDataResponse> sinistreVehiculeTableDataResponses = new ArrayList<>();
		List<SinistreVehiculeTableDataDTO> sinistreVehiculeTableDataDTOS = exploitation
				.getPaginationListSinistreVehicule(etat, Integer.parseInt(annee), Integer.parseInt(page),
						Integer.parseInt(limit));
		if (!sinistreVehiculeTableDataDTOS.isEmpty()) {
			sinistreVehiculeTableDataDTOS.forEach(sinistreVehiculeTableDataDTO -> {
				sinistreVehiculeTableDataResponses
						.add(modelMapper.map(sinistreVehiculeTableDataDTO, SinistreVehiculeTableDataResponse.class));
			});
		}
		return new ResponseEntity<>(sinistreVehiculeTableDataResponses, HttpStatus.OK);
	}

	@GetMapping(path = "/total_number_sinistre_vehicule")
	Long getTotalNumberListSinistreVehicule(@RequestParam(value = "etat") String etat,
			@RequestParam(value = "annee") String annee) {
		return exploitation.getTotalNumberListSinistreVehicule(etat, Integer.parseInt(annee));
	}

	@DeleteMapping(path = "/delete_document_sinistre_vehicule/{id}")
	void deleteSelectedDocumentSinistreVehicule(@PathVariable Long id) {
		exploitation.deleteSelectedDocumentSinistreVehicule(id);
	}

	@DeleteMapping(path = "/sinistre_vehicule/{id}")
	ResponseEntity<HttpStatus> deleteSelectedSinistreVehicule(@PathVariable Long id) {
		SinistreVehiculeEntity sve = sinistreVehiculeRepository.findById(id).get();
		exploitation.deleteSelectedSinistreVehicule(id);
		tracabiliteController.deleteSelectedSinistreVehiculeTracabilite(sve.getNumeroSinistre(),
				SecurityContextHolder.getContext().getAuthentication().getPrincipal().toString());

		return new ResponseEntity<>(HttpStatus.OK);
	}

	@GetMapping(path = "/get_document_sinistre_vehicule/{id}")
	ResponseEntity<List<DocumentSinistreEntity>> getAllDocumentSinistres(@PathVariable Long id) {
		List<DocumentSinistreEntity> allDocuments = exploitation.loadAllDocumentSinistres(id);
		return new ResponseEntity<List<DocumentSinistreEntity>>(allDocuments, HttpStatus.OK);
	}

	@PostMapping(path = "/document_sinistre_vehicule/{id}/{observation}")
	ResponseEntity<DocumentSinistreEntity> uploadNewDocumentSinistreVehicule(@PathVariable Long id,
			@PathVariable String observation, @RequestParam("file") MultipartFile file) {
		LocalDateTime today = LocalDateTime.now();
		String month = String.valueOf(today.getMonthValue());
		String day = String.valueOf(today.getDayOfMonth());
		String year = String.valueOf(today.getYear());
		String hours = String.valueOf(today.getHour());
		String minutes = String.valueOf(today.getMinute());
		String seconds = String.valueOf(today.getSecond());
		String datetimeString = year + '-' + month + '-' + day + '-' + hours + '-' + minutes + '-' + seconds;
		String fileName = file.getOriginalFilename();
		// ajout date (le nom du fichier doit etre unique pour eviter d'écraser le
		// fichier dans le disque dur
		String newFileName = FilenameUtils.getBaseName(fileName) + '_' + datetimeString + "."
				+ FilenameUtils.getExtension(fileName);
		File serverFile = new File("src/main/resources/Images/" + File.separator + newFileName);
		try {
			FileUtils.writeByteArrayToFile(serverFile, file.getBytes());
			DocumentSinistreDTO documentSinistreDTO = new DocumentSinistreDTO();
			documentSinistreDTO.setNomDocument(file.getOriginalFilename());
			documentSinistreDTO.setTypeDocument(FilenameUtils.getExtension(fileName));
			documentSinistreDTO.setAdresseDocument("Images/" + newFileName);
			documentSinistreDTO.setTailleDocument(file.getSize());
			documentSinistreDTO.setDateUpload(LocalDate.now());
			documentSinistreDTO.setObservations(observation);
			return new ResponseEntity<DocumentSinistreEntity>(
					exploitation.uploadNewDocumentSinistreVehicule(id, documentSinistreDTO), HttpStatus.OK);
		} catch (IOException e) {
			e.printStackTrace();
		}
		return new ResponseEntity<DocumentSinistreEntity>(new DocumentSinistreEntity(),
				HttpStatus.INTERNAL_SERVER_ERROR);
	}

	@GetMapping(path = "/document_sinistre_vehicule/{id}")
	private ResponseEntity<InputStreamResource> getByteDocumentSinistre(@PathVariable Long id) throws IOException {
		ClassPathResource imgFile = new ClassPathResource(exploitation.getByteDocumentSinistre(id));
		return ResponseEntity.ok().contentType(MediaType.APPLICATION_PDF)
				.body(new InputStreamResource(imgFile.getInputStream()));
	}

	@GetMapping(path = "/select_vehicule_emprunt")
	private ResponseEntity<List<SelectVehiculeResponse>> getSelectVehiculeByStrucutureForEmprunt() {
		List<SelectVehiculeResponse> selectVehiculeResponses = new ArrayList<>();
		ModelMapper modelMapper = new ModelMapper();
		UserEntity userEntity = userRepository
				.findFirstByMatricule(SecurityContextHolder.getContext().getAuthentication().getPrincipal().toString());
		List<SelectVehiculeDTO> selectVehiculeDTOS = exploitation.getSelectVehiculeByStrucutureForEmprunt(userEntity);
		if (!selectVehiculeDTOS.isEmpty()) {
			selectVehiculeDTOS.forEach(selectVehiculeDTO -> {
				selectVehiculeResponses.add(modelMapper.map(selectVehiculeDTO, SelectVehiculeResponse.class));
			});
		}
		return new ResponseEntity<>(selectVehiculeResponses, HttpStatus.OK);
	}

	@GetMapping(path = "/select_beneficiaire_strucuture")
	private ResponseEntity<List<ListBeneficiaireStructureResponse>> getListBeneficiaireStructureResponse() {
		ModelMapper modelMapper = new ModelMapper();
		List<ListBeneficiaireStructureResponse> listBeneficiaireStructureResponses = new ArrayList<>();
		List<ListBeneficiaireStructureDTO> listBeneficiaireStructureDTOS = exploitation
				.getListBeneficiaireStructureResponse();
		if (!listBeneficiaireStructureDTOS.isEmpty()) {
			listBeneficiaireStructureDTOS.forEach(listBeneficiaireStructureDTO -> {
				listBeneficiaireStructureResponses
						.add(modelMapper.map(listBeneficiaireStructureDTO, ListBeneficiaireStructureResponse.class));
			});
		}
		return new ResponseEntity<>(listBeneficiaireStructureResponses, HttpStatus.OK);
	}

	@PostMapping(path = "/emprunt_vehicule")
	ResponseEntity<HttpStatus> addNewEmpruntVehicule(@RequestBody NewEmpruntVehiculeRequest newEmpruntVehiculeRequest) {
		ModelMapper modelMapper = new ModelMapper();
		NewEmpruntVehiculeDTO newEmpruntVehiculeDTO = modelMapper.map(newEmpruntVehiculeRequest,
				NewEmpruntVehiculeDTO.class);
		exploitation.addNewEmpruntVehicule(newEmpruntVehiculeDTO);
		tracabiliteController.addNewEmpruntVehiculeTracabilite(newEmpruntVehiculeDTO.getDateEmprunt(),
				SecurityContextHolder.getContext().getAuthentication().getPrincipal().toString());
		return new ResponseEntity<>(HttpStatus.OK);
	}

	@PutMapping(path = "/emprunt_vehicule")
	ResponseEntity<HttpStatus> modifySelectedEmpruntVehicule(
			@RequestBody NewEmpruntVehiculeRequest newEmpruntVehiculeRequest) {
		ModelMapper modelMapper = new ModelMapper();
		NewEmpruntVehiculeDTO newEmpruntVehiculeDTO = modelMapper.map(newEmpruntVehiculeRequest,
				NewEmpruntVehiculeDTO.class);
		exploitation.modifySelectedEmpruntVehicule(newEmpruntVehiculeDTO);
		tracabiliteController.modifySelectedEmpruntVehiculeTracabilite(newEmpruntVehiculeDTO.getDateEmprunt(),
				SecurityContextHolder.getContext().getAuthentication().getPrincipal().toString());
		return new ResponseEntity<>(HttpStatus.OK);
	}

	@GetMapping(path = "/pagination_emprunt_vehicule")
	ResponseEntity<List<EmpruntVehiculeTableDataResponse>> getPaginationListEmpruntVehiculeBySelectedStatusAndYear(
			@RequestParam(value = "etat") String etat, @RequestParam(value = "annee") String annee,
			@RequestParam(value = "page") String page, @RequestParam(value = "limit") String limit)
			throws ParseException {
		ModelMapper modelMapper = new ModelMapper();
		List<EmpruntVehiculeTableDataResponse> empruntVehiculeTableDataResponses = new ArrayList<>();
		List<EmpruntVehiculeTableDataDTO> empruntVehiculeTableDataDTOS = exploitation
				.getPaginationListEmpruntVehiculeBySelectedStatusAndYear(etat, annee, Integer.parseInt(page),
						Integer.parseInt(limit));
		if (!empruntVehiculeTableDataDTOS.isEmpty()) {
			empruntVehiculeTableDataDTOS.forEach(empruntVehiculeTableDataDTO -> {
				empruntVehiculeTableDataResponses
						.add(modelMapper.map(empruntVehiculeTableDataDTO, EmpruntVehiculeTableDataResponse.class));
			});
		}
		return new ResponseEntity<>(empruntVehiculeTableDataResponses, HttpStatus.OK);
	}

	@GetMapping(path = "/total_item_emprunt_vehicule")
	Long getTotalItemListEmpruntVehiculeBySelectedStatusAndYear(@RequestParam(value = "etat") String etat,
			@RequestParam(value = "annee") String annee, @RequestParam(value = "page") String page,
			@RequestParam(value = "limit") String limit) throws ParseException {
		return exploitation.getTotalItemListEmpruntVehiculeBySelectedStatusAndYear(etat, annee, Integer.parseInt(page),
				Integer.parseInt(limit));
	}

	@PostMapping(path = "/confirm_emprunt_vehicule")
	void confirmSelectedEmpruntVehicule(@RequestBody Long id) {
		EmpruntVehiculeEntity eve = empruntVehiculeRepository.findById(id).get();
		tracabiliteController.confirmSelectedEmpruntVehiculeTracabilite(eve.getDateEmprunt(),
				SecurityContextHolder.getContext().getAuthentication().getPrincipal().toString());
		exploitation.confirmSelectedEmpruntVehicule(id);
	}

	@DeleteMapping(path = "/emprunt_vehicule/{id}")
	ResponseEntity<HttpStatus> deleteSelectedEmpruntVehicule(@PathVariable Long id) {
		EmpruntVehiculeEntity eve = empruntVehiculeRepository.findById(id).get();
		tracabiliteController.deleteSelectedEmpruntVehiculeTracabilite(eve.getDateEmprunt(),
				SecurityContextHolder.getContext().getAuthentication().getPrincipal().toString());
		exploitation.deleteSelectedEmpruntVehicule(id);
		return new ResponseEntity<>(HttpStatus.OK);
	}
}
